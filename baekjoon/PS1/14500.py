n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]

case = [
    [(0, 0), (0, 1), (0, 2), (0, 3)], 
    [(0, 0), (1, 0), (2, 0), (3, 0)], 
    [(0, 0), (0, 1), (1, 0), (1, 1)],
    [(0, 0), (1, 0), (1, 1), (2, 1)], 
    [(1, 0), (0, 1), (1, 1), (2, 0)], 
    [(1, 0), (1, 1), (0, 1), (0, 2)], 
    [(0, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (1, 0), (2, 0), (2, 1)], 
    [(0, 1), (1, 1), (2, 0), (2, 1)], 
    [(0, 0), (0, 1), (1, 0), (2, 0)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(0, 0), (1, 0), (1, 1), (1, 2)],
    [(1, 0), (1, 1), (1, 2), (0, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],
    [(0, 0), (1, 0), (1, 1), (2, 0)],
    [(1, 0), (0, 1), (1, 1), (2, 1)] 
]

def tetromino(x, y):
    global ans
    for i in range(19):
        total = 0
        for j in range(4):
            nx = x + case[i][j][0]
            ny = y + case[i][j][1]
            if nx < 0 or nx >= n or ny < 0 or ny >= m: 
                break
            total += board[nx][ny]
        ans = max(ans, total)

ans = 0
for i in range(n):
    for j in range(m):
        tetromino(i, j)

print(ans)